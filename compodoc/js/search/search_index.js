var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiConfig.html",[0,0.479,1,1.46]],["body/interfaces/ApiConfig.html",[0,0.846,1,2.141,2,0.5,3,0.5,4,0.329,5,1.341,6,2.266,7,2.357,8,2.399,9,1.863,10,0.329,11,1.26,12,0.974,13,2.927,14,2.927,15,2.927,16,1.244,17,0.759,18,0.041,19,1.361,20,1.866,21,2.357,22,2.141,23,2.709,24,2.357,25,0.695,26,2.357,27,2.927,28,0.785,29,1.341,30,1.012,31,0.877,32,0.718,33,1.697,34,1.671,35,0.974,36,1.341,37,1.671,38,0.797,39,1.26,40,1.68,41,1.203,42,0.695,43,1.503,44,1.697,45,1.203,46,1.697,47,0.877,48,1.697,49,1.697,50,1.203,51,1.341,52,1.503,53,0.026,54,0.026]],["title/interfaces/AttributeDecoratorOptions.html",[0,0.479,55,1.847]],["body/interfaces/AttributeDecoratorOptions.html",[0,0.782,2,0.62,3,0.62,4,0.408,10,0.408,11,1.265,12,1.148,16,1.193,17,0.705,18,0.041,19,0.977,25,0.62,32,0.72,39,0.977,42,0.802,53,0.03,54,0.03,55,3.191,56,1.861,57,4.261,58,4.261,59,3.018,60,1.339,61,2.101,62,2.402,63,1.861,64,1.861,65,2.805,66,1.489,67,4.029,68,2.402,69,3.633,70,1.929,71,1.339,72,3.633,73,2.805]],["title/classes/BaseEntity.html",[30,0.69,74,0.69]],["body/classes/BaseEntity.html",[2,0.333,3,0.333,4,0.219,10,0.219,11,0.813,12,0.376,16,0.972,17,0.624,18,0.042,19,1.119,20,1.533,25,0.97,28,0.582,30,0.899,32,0.255,34,1.239,38,0.624,39,0.994,42,0.333,53,0.036,54,0.019,59,2.137,60,1.981,63,1.893,66,0.801,70,2.395,71,0.72,74,0.653,75,1.508,76,2.436,77,3.212,78,3.212,79,1.901,80,3.212,81,1.003,82,3.212,83,3.212,84,2.842,85,3.476,86,1.893,87,1.939,88,2.842,89,1.837,90,1.381,91,1.548,92,2.845,93,1.747,94,3.212,95,2.75,96,2.333,97,2.333,98,2.333,99,2.333,100,2.333,101,2.333,102,2.333,103,1.837,104,1.837,105,3.212,106,2.333,107,1.998,108,2.333,109,1.837,110,2.333,111,1.837,112,0.648,113,1.837,114,1.837,115,1.837,116,1.291,117,1.129,118,1.508,119,1.837,120,1.837,121,2.842,122,2.842,123,3.912,124,1.837,125,2.333,126,1.837,127,1.837,128,1.837,129,1.837,130,3.476,131,1.837,132,1.837,133,1.837,134,1.837,135,1.837]],["title/interfaces/CustomServiceConfig.html",[0,0.479,41,1.309]],["body/interfaces/CustomServiceConfig.html",[0,0.839,1,1.936,2,0.529,3,0.529,4,0.348,5,1.418,7,1.794,8,2.169,9,1.418,10,0.348,11,1.297,13,1.794,14,1.794,15,1.794,16,1.21,17,0.777,18,0.041,19,1.139,20,1.561,21,1.794,22,1.936,23,2.449,24,1.794,25,0.529,26,1.794,27,2.449,28,0.815,29,1.418,30,1.172,31,0.927,32,0.731,33,1.794,34,1.736,35,1.03,36,1.418,37,1.736,38,0.875,39,1.297,40,1.902,41,1.736,42,0.925,43,1.589,44,1.794,45,1.271,46,1.794,47,0.927,48,1.794,49,1.794,50,1.271,51,1.418,52,1.589,53,0.027,54,0.027]],["title/injectables/DataContext.html",[47,0.955,136,0.771]],["body/injectables/DataContext.html",[2,0.459,3,0.459,4,0.302,10,0.302,11,1.032,12,0.518,16,0.582,17,0.575,18,0.042,25,0.459,28,0.938,30,1.053,32,0.352,34,2.195,35,1.87,36,1.231,38,0.844,39,1.202,41,1.573,42,0.459,45,1.573,47,1.147,53,0.025,54,0.025,60,1.648,66,1.997,68,2.537,70,2.111,74,0.582,81,1.274,86,1.379,87,1.648,95,2.537,112,0.894,136,1.079,137,2.079,138,4.583,139,2.533,140,2.227,141,3.609,142,3.609,143,2.533,144,1.104,145,0.993,146,2.079,147,1.557,148,1.781,149,2.533,150,2.533,151,2.533,152,3.609,153,2.533,154,2.533,155,4.205,156,4.205,157,4.583,158,3.609,159,3.609,160,2.533,161,2.533,162,2.533,163,2.533,164,2.533]],["title/injectables/DataServiceFactory.html",[136,0.771,140,1.46]],["body/injectables/DataServiceFactory.html",[2,0.441,3,0.441,4,0.29,10,0.29,12,0.841,17,0.655,18,0.041,25,0.815,28,1.123,29,1.181,30,1.033,31,0.772,32,0.337,35,1.936,37,1.059,38,0.717,40,1.587,42,0.745,50,1.059,51,1.181,53,0.024,54,0.024,70,1.527,71,1.61,74,0.558,76,2.449,81,1.236,86,1.908,87,1.61,90,1.181,112,1.45,136,1.055,140,1.703,144,1.059,145,1.61,147,1.494,148,1.708,165,3.691,166,1.995,167,1.997,168,3.503,169,2.43,170,4.497,171,4.108,172,3.691,173,3.373,174,3.691,175,4.108,176,3.691,177,2.43,178,3.503,179,2.888,180,1.323,181,2.43,182,3.503,183,2.43,184,1.708,185,1.708,186,1.708,187,1.703,188,2.876,189,1.494,190,1.79,191,1.494,192,1.703,193,2.43,194,2.43,195,4.108,196,2.43,197,2.43,198,2.43,199,4.497,200,2.43,201,2.43,202,2.43,203,2.43,204,2.43,205,2.43]],["title/interfaces/DataSource.html",[0,0.479,35,1.06]],["body/interfaces/DataSource.html",[0,0.827,1,2.318,2,0.503,3,0.503,4,0.331,5,1.348,7,1.706,8,2.095,9,1.348,10,0.331,11,1.263,12,1.061,13,1.706,14,1.706,15,1.706,16,1.096,17,0.864,18,0.041,19,1.1,20,1.508,21,1.706,22,1.87,23,2.366,24,1.706,25,0.503,26,1.706,27,2.366,28,0.788,29,1.348,30,1.015,31,0.882,32,0.72,33,1.706,34,1.677,35,1.358,36,2.318,37,2.079,38,0.864,39,1.574,40,1.877,41,1.209,42,0.698,43,1.511,44,1.706,45,1.209,46,1.706,47,0.882,48,1.706,49,1.706,50,1.209,51,1.348,52,1.511,53,0.026,54,0.026]],["title/interfaces/EntityAttribute.html",[0,0.479,63,1.636]],["body/interfaces/EntityAttribute.html",[0,0.787,2,0.628,3,0.628,4,0.413,10,0.413,11,1.276,12,1.131,16,1.198,17,0.711,18,0.041,19,0.99,25,0.628,32,0.724,39,0.99,42,0.979,53,0.03,54,0.03,55,3.319,56,1.885,57,2.842,58,2.842,59,2.128,60,1.357,61,2.128,62,2.433,63,2.43,64,1.885,65,2.842,66,1.508,67,4.053,68,2.433,69,3.663,70,1.945,71,1.357,72,3.663,73,2.842]],["title/interfaces/EntityServiceConfig.html",[0,0.479,45,1.309]],["body/interfaces/EntityServiceConfig.html",[0,0.833,1,1.9,2,0.515,3,0.515,4,0.339,5,1.38,6,2.332,7,1.746,8,2.435,9,1.38,10,0.339,11,1.378,12,0.801,13,1.746,14,1.746,15,1.746,16,1.2,17,0.713,18,0.041,19,1.118,20,1.533,21,1.746,22,2.174,23,2.405,24,1.746,25,0.515,26,1.746,27,2.405,28,0.801,29,1.38,30,1.161,31,0.903,32,0.725,33,1.746,34,1.704,35,1.002,36,1.38,37,1.704,38,0.892,39,1.279,40,1.843,41,1.238,42,0.916,43,2.129,44,2.405,45,1.704,46,2.405,47,1.243,48,2.405,49,1.746,50,1.238,51,1.38,52,1.547,53,0.027,54,0.027]],["title/classes/FirebaseEntity.html",[74,0.69,190,1.309]],["body/classes/FirebaseEntity.html",[2,0.437,3,0.437,4,0.287,10,0.287,11,0.995,12,0.493,16,1.137,17,0.757,18,0.041,19,1.169,20,1.364,25,0.926,28,0.493,30,1.258,31,0.765,32,0.334,34,1.049,38,0.555,39,0.995,42,0.898,53,0.034,54,0.024,59,1.481,60,1.755,66,1.049,70,2.07,74,0.8,76,2.78,77,3.356,78,3.356,79,2.176,80,3.356,81,1.228,82,3.356,83,3.356,87,2.087,90,1.692,91,1.895,92,2.696,93,1.481,94,2.857,95,2.447,96,1.977,97,1.977,98,1.977,99,1.977,100,1.977,101,1.977,102,1.977,105,2.857,106,1.977,107,1.693,108,1.977,110,1.977,112,0.85,125,1.977,190,1.517,206,3.356,207,1.977,208,3.481,209,4.478,210,2.408,211,5.105,212,2.408,213,2.408,214,2.408,215,2.408,216,2.408,217,2.408,218,2.408,219,2.408,220,2.408]],["title/injectables/FirebaseRepository.html",[136,0.771,187,1.46]],["body/injectables/FirebaseRepository.html",[2,0.267,3,0.267,4,0.176,10,0.176,11,0.683,12,0.833,16,0.691,17,0.755,18,0.042,20,1.356,25,0.979,28,0.913,31,0.469,32,0.205,38,0.772,39,1.163,42,0.738,53,0.035,54,0.016,60,1.856,66,1.773,70,1.041,71,0.936,74,0.339,76,2.509,79,1.161,81,0.843,86,1.3,87,1.996,90,1.161,91,1.3,92,2.07,93,1.468,112,1.436,116,1.037,117,0.907,136,0.773,144,0.643,145,0.936,167,1.161,172,3.516,173,2.84,174,2.84,179,1.679,180,1.3,184,1.037,185,1.037,187,1.161,189,0.907,190,2.247,191,0.907,221,4.233,222,0.907,223,4.608,224,2.471,225,2.84,226,2.84,227,3.46,228,3.46,229,2.127,230,2.127,231,1.468,232,1.468,233,2.388,234,1.468,235,1.21,236,2.388,237,1.475,238,2.977,239,1.475,240,1.21,241,1.468,242,1.475,243,1.468,244,1.475,245,2.127,246,2.388,247,1.475,248,1.468,249,1.21,250,1.21,251,1.475,252,1.96,253,2.84,254,3.136,255,1.96,256,1.96,257,1.475,258,1.96,259,1.475,260,3.46,261,1.21,262,2.471,263,0.803,264,1.037,265,1.21,266,1.679,267,1.475,268,1.475,269,3.46,270,1.475,271,1.475,272,1.475,273,1.96,274,1.21,275,1.475,276,1.475,277,1.037,278,1.037,279,1.96,280,1.475,281,1.475,282,1.475,283,1.96,284,1.475,285,1.475,286,1.475,287,2.388,288,1.475,289,1.96,290,1.21,291,1.475,292,1.475,293,1.475,294,1.475,295,1.475,296,2.388,297,1.475,298,1.475,299,1.475]],["title/injectables/FirestoreRepository.html",[136,0.771,192,1.46]],["body/injectables/FirestoreRepository.html",[2,0.314,3,0.314,4,0.207,10,0.207,11,0.777,12,0.843,16,1.004,17,0.728,18,0.042,20,1.486,25,0.978,28,0.935,31,0.551,32,0.241,38,0.793,39,1.249,42,0.747,53,0.036,54,0.018,60,1.79,66,1.904,71,0.679,74,0.398,76,2.487,79,0.842,81,0.959,86,1.479,87,1.986,90,1.32,91,1.479,92,2.065,93,1.67,112,1.453,116,1.219,117,1.066,136,0.86,144,0.755,145,1.065,167,1.32,176,3.113,180,1.479,186,1.219,189,1.066,190,2.328,191,1.066,192,1.32,222,1.066,224,2.75,225,3.113,226,3.113,229,2.331,230,2.331,231,1.67,232,1.67,234,1.67,235,1.423,238,2.989,240,1.423,241,1.67,243,1.67,245,2.331,248,1.67,249,1.423,250,1.423,252,2.23,253,3.113,254,3.323,255,2.23,256,2.23,258,2.23,263,0.944,264,1.219,265,1.423,266,1.91,273,2.23,274,1.423,277,1.219,278,1.219,279,1.423,283,1.423,289,1.423,290,1.423,300,4.229,301,3.792,302,3.35,303,2.716,304,1.733,305,1.733,306,1.733,307,1.733,308,1.733,309,1.733,310,1.733,311,1.733,312,1.733,313,3.35,314,1.733,315,1.733,316,1.733,317,1.733,318,1.733,319,1.733,320,1.733,321,1.423,322,1.733]],["title/modules/NgxDataContextModule.html",[323,1.46,324,1.847]],["body/modules/NgxDataContextModule.html",[2,0.516,3,0.516,4,0.34,18,0.042,19,0.814,25,0.516,28,1.147,29,1.384,30,0.654,31,0.905,32,0.785,35,1.005,37,1.241,38,0.625,40,1.581,47,1.424,53,0.027,54,0.027,60,1.116,74,0.654,118,2.338,140,2.177,144,1.241,146,3.216,147,1.751,148,2.002,185,2.002,186,2.002,187,2.177,188,3.96,190,1.241,191,1.751,192,2.177,323,1.384,324,2.754,325,2.002,326,3.918,327,2.338,328,3.918,329,3.918,330,3.677,331,3.918,332,3.918,333,3.918,334,3.918,335,3.918,336,3.918,337,2.848,338,2.848,339,2.002,340,2.848,341,2.338,342,2.002]],["title/interfaces/Repository.html",[0,0.479,145,1.177]],["body/interfaces/Repository.html",[0,0.659,2,0.559,3,0.559,4,0.368,10,0.368,12,1.021,16,1.072,17,0.795,18,0.04,25,0.971,28,0.847,30,0.709,31,0.98,32,0.428,38,0.744,42,0.904,53,0.028,54,0.028,79,1.499,81,1.46,87,2.098,112,1.76,145,1.621,167,2.01,180,2.252,229,3.066,230,3.066,231,2.543,232,2.543,234,2.543,238,3.461,241,2.543,243,2.543,245,3.066,248,2.543,254,3.957,263,1.68,343,2.532,344,3.084,345,3.084,346,3.084,347,3.084,348,3.084,349,3.084]],["title/injectables/RestApiRepositoryService.html",[136,0.771,350,2.111]],["body/injectables/RestApiRepositoryService.html",[2,0.474,3,0.474,4,0.312,9,2.541,10,0.312,12,0.951,16,0.983,17,0.741,18,0.041,25,0.922,28,0.951,30,1.265,32,0.363,38,0.682,42,0.843,53,0.025,54,0.025,71,1.994,74,0.6,79,1.27,81,1.302,87,1.994,112,1.64,136,1.098,144,1.139,145,1.446,147,1.607,167,1.793,180,2.009,189,1.607,222,1.607,229,2.857,230,2.857,231,2.269,232,2.269,234,2.269,238,3.339,241,2.269,243,2.269,245,2.857,248,2.269,261,2.145,263,1.423,266,3.676,277,3.576,278,3.576,350,2.594,351,4.292,352,2.613,353,2.613,354,2.613,355,2.613,356,2.613]],["title/changelog.html",[357,1.776,358,1.776,359,2.526]],["body/changelog.html",[18,0.034,53,0.034,54,0.034,360,4.238,361,4.238,362,4.238,363,4.238,364,4.238,365,4.238,366,5.06,367,4.154,368,5.06,369,5.06,370,5.06,371,5.409,372,4.238,373,4.238,374,4.238,375,4.238,376,4.238,377,4.238]],["title/coverage.html",[378,3.335]],["body/coverage.html",[0,0.865,1,1.457,4,0.358,5,2.395,9,1.457,17,0.478,18,0.041,19,0.857,30,0.689,35,1.058,38,0.478,40,1.058,41,1.307,45,1.307,47,0.953,53,0.028,54,0.028,55,1.844,56,2.684,61,1.844,63,1.633,64,2.505,71,1.175,74,0.932,75,2.462,136,1.322,137,2.462,140,1.457,145,1.175,165,2.462,166,2.462,187,1.457,190,1.307,192,1.457,206,2.462,207,2.462,221,2.462,222,2.828,300,2.462,325,2.108,343,2.462,350,2.108,351,2.462,378,2.462,379,2.462,380,2.999,381,2.999,382,2.853,383,5.897,384,5.15,385,4.058,386,2.462,387,2.462,388,2.462,389,2.462,390,2.999,391,2.999,392,4.6,393,2.999,394,2.999,395,2.999,396,2.999,397,2.999,398,4.058,399,2.999,400,2.999,401,2.999,402,2.999]],["title/dependencies.html",[403,2.526,404,2.215]],["body/dependencies.html",[18,0.041,50,1.489,53,0.03,54,0.03,117,2.101,144,1.489,184,2.402,263,1.861,327,2.805,404,2.101,405,3.417,406,5.682,407,3.417,408,3.417,409,3.417,410,4.425,411,4.425,412,3.417,413,3.417,414,3.417,415,3.417,416,3.417,417,3.417,418,3.111,419,3.417,420,3.417,421,4.908,422,3.417,423,3.417,424,3.417,425,3.417,426,3.417,427,3.417,428,3.417,429,2.805,430,3.417,431,3.417,432,3.417,433,3.417,434,3.417,435,3.417,436,3.417,437,2.805,438,3.417,439,3.417,440,3.417,441,2.805,442,3.417,443,3.417,444,3.417,445,3.417,446,3.417]],["title/miscellaneous/enumerations.html",[447,1.228,448,2.957]],["body/miscellaneous/enumerations.html",[5,2.189,10,0.537,18,0.036,37,2.286,50,1.963,51,2.189,52,2.453,53,0.036,54,0.036,447,2.189,448,3.698,449,4.504]],["title/miscellaneous/functions.html",[64,1.962,447,1.228]],["body/miscellaneous/functions.html",[10,0.485,12,1.131,18,0.039,19,1.41,38,0.847,42,1.002,53,0.034,54,0.034,56,2.212,64,2.212,112,1.875,179,2.856,386,3.335,387,4.049,388,4.049,389,3.335,447,1.974,450,3.335,451,4.062,452,4.062,453,4.062,454,4.062,455,4.062]],["title/index.html",[10,0.301,357,1.776,358,1.776]],["body/index.html",[4,0.326,8,1.488,18,0.04,22,1.328,28,1.105,32,0.528,36,1.328,38,0.436,40,1.344,43,1.488,47,1.716,53,0.026,54,0.026,74,0.875,81,0.964,92,2.073,167,1.328,264,2.676,323,2.422,324,3.173,330,3.125,339,2.676,341,2.243,367,3.125,404,2.341,418,1.921,429,3.125,441,4.433,456,2.732,457,4.381,458,4.381,459,2.732,460,2.732,461,2.732,462,2.732,463,2.243,464,2.732,465,2.732,466,2.243,467,2.732,468,2.732,469,2.732,470,4.983,471,2.243,472,3.807,473,2.732,474,2.732,475,4.381,476,2.732,477,2.732,478,2.732,479,2.732,480,2.732,481,3.807,482,2.732,483,2.732,484,2.732,485,2.732,486,2.732,487,2.732,488,2.732,489,2.732,490,2.732,491,2.732,492,2.732,493,2.732,494,2.732,495,2.732,496,2.732,497,2.732,498,2.732,499,2.732,500,2.732,501,2.732,502,2.732,503,2.732,504,2.732,505,2.243,506,3.807,507,2.732,508,2.732,509,2.732,510,2.732,511,2.732,512,2.732,513,3.08,514,2.243,515,2.243,516,2.732,517,2.243,518,2.243,519,2.732,520,3.125]],["title/license.html",[357,1.776,358,1.776,513,1.776]],["body/license.html",[4,0.398,18,0.03,22,2.116,53,0.03,54,0.03,262,2.736,321,2.736,342,2.343,379,2.736,437,3.98,463,2.736,471,2.736,505,3.574,513,2.343,514,3.98,515,2.736,517,2.736,518,2.736,520,3.574,521,3.333,522,4.354,523,3.333,524,3.333,525,3.333,526,3.333,527,4.354,528,3.333,529,5.141,530,5.715,531,3.333,532,4.354,533,4.849,534,3.333,535,4.354,536,3.333,537,3.333,538,3.333,539,3.333,540,3.333,541,3.333,542,3.333,543,3.333,544,3.333,545,3.333,546,3.333,547,4.354,548,3.333,549,3.333,550,4.354,551,3.333,552,3.333,553,3.333,554,3.333,555,3.333,556,3.333,557,3.333,558,3.333,559,3.333,560,3.333,561,3.333,562,3.333,563,3.333,564,3.333,565,3.333,566,3.333,567,3.333,568,3.333,569,3.333,570,3.333,571,2.736,572,3.333]],["title/modules.html",[323,1.974]],["body/modules.html",[18,0.036,53,0.036,54,0.036,323,2.236,324,2.829,573,4.601,574,4.601,575,4.601]],["title/overview.html",[576,3.335]],["body/overview.html",[0,0.689,18,0.035,32,0.6,53,0.035,54,0.035,74,0.993,107,3.039,136,1.11,323,2.488,339,3.039,342,3.039,404,2.658,418,3.039,466,3.549,571,3.549,576,3.549,577,4.323,578,5.12,579,4.323,580,4.323,581,4.323]],["title/miscellaneous/variables.html",[382,2.532,447,1.228]],["body/miscellaneous/variables.html",[10,0.496,17,0.663,18,0.04,40,1.893,47,1.321,53,0.034,54,0.034,56,2.263,61,3.298,62,2.922,90,2.43,91,2.723,140,2.02,187,2.02,192,2.02,325,2.922,382,2.922,447,2.02,450,3.412,582,4.156]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["0.0.7",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["0.8.26",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":392,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":393,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":107,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{},"overview.html":{}}}],["1.1.6",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["1.4.9",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":466,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0.0",{"_index":469,"title":{},"body":{"index.html":{}}}],["2.1.4",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["2.5.4",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":391,"title":{},"body":{"coverage.html":{}}}],["2017",{"_index":516,"title":{},"body":{"index.html":{}}}],["2018",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["2019",{"_index":521,"title":{},"body":{"license.html":{}}}],["4.0.0",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["4.1.3",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["4.17.11",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":580,"title":{},"body":{"overview.html":{}}}],["5.1.0",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["5.5.7",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["6.1.0",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["66",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":581,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["7.1.1",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["9e6459cf",{"_index":373,"title":{},"body":{"changelog.html":{}}}],["_",{"_index":116,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["_.clonedeep(this.ent",{"_index":253,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["_.isempty(ent",{"_index":100,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["a5a8d3d8",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":471,"title":{},"body":{"index.html":{},"license.html":{}}}],["accessor",{"_index":84,"title":{},"body":{"classes/BaseEntity.html":{}}}],["action",{"_index":463,"title":{},"body":{"index.html":{},"license.html":{}}}],["adjust",{"_index":477,"title":{},"body":{"index.html":{}}}],["af",{"_index":302,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["alfredo",{"_index":517,"title":{},"body":{"index.html":{},"license.html":{}}}],["and/or",{"_index":541,"title":{},"body":{"license.html":{}}}],["angular",{"_index":457,"title":{},"body":{"index.html":{}}}],["angular/anim",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":327,"title":{},"body":{"modules/NgxDataContextModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":29,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"modules/NgxDataContextModule.html":{}}}],["angular/compil",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":144,"title":{},"body":{"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"injectables/RestApiRepositoryService.html":{},"dependencies.html":{}}}],["angular/fir",{"_index":184,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"dependencies.html":{}}}],["angular/fire/databas",{"_index":185,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"modules/NgxDataContextModule.html":{}}}],["angular/fire/firestor",{"_index":186,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{}}}],["angular/form",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["angular/rout",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["angularfir",{"_index":223,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["angularfire.list(`${this.entity.entitynam",{"_index":268,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["angularfiredatabas",{"_index":172,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{}}}],["angularfiredatabasemodul",{"_index":331,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["angularfirelist",{"_index":260,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["angularfirestor",{"_index":176,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirestoreRepository.html":{}}}],["angularfirestoremodul",{"_index":332,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["any).$$nam",{"_index":120,"title":{},"body":{"classes/BaseEntity.html":{}}}],["any)['$$nam",{"_index":155,"title":{},"body":{"injectables/DataContext.html":{}}}],["any)[attr.nam",{"_index":123,"title":{},"body":{"classes/BaseEntity.html":{}}}],["any)[config.nam",{"_index":163,"title":{},"body":{"injectables/DataContext.html":{}}}],["any)[target",{"_index":158,"title":{},"body":{"injectables/DataContext.html":{}}}],["api",{"_index":9,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{}}}],["apiconfig",{"_index":1,"title":{"interfaces/ApiConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"coverage.html":{}}}],["appcompon",{"_index":506,"title":{},"body":{"index.html":{}}}],["applic",{"_index":458,"title":{},"body":{"index.html":{}}}],["appmodul",{"_index":508,"title":{},"body":{"index.html":{}}}],["aris",{"_index":570,"title":{},"body":{"license.html":{}}}],["array",{"_index":39,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["array.isarray(data",{"_index":93,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["array.isarray(datasource.ent",{"_index":153,"title":{},"body":{"injectables/DataContext.html":{}}}],["array.isarray(datasource.servic",{"_index":161,"title":{},"body":{"injectables/DataContext.html":{}}}],["associ",{"_index":531,"title":{},"body":{"license.html":{}}}],["attr.opt",{"_index":127,"title":{},"body":{"classes/BaseEntity.html":{}}}],["attr.options.isent",{"_index":132,"title":{},"body":{"classes/BaseEntity.html":{}}}],["attr.options.serializednam",{"_index":128,"title":{},"body":{"classes/BaseEntity.html":{}}}],["attribut",{"_index":19,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["attribute(opt",{"_index":453,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attribute_metadata",{"_index":61,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["attributedecoratoropt",{"_index":55,"title":{"interfaces/AttributeDecoratorOptions.html":{}},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{},"coverage.html":{}}}],["attributekey",{"_index":67,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{}}}],["author",{"_index":560,"title":{},"body":{"license.html":{}}}],["avail",{"_index":574,"title":{},"body":{"modules.html":{}}}],["awesom",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["baseent",{"_index":30,"title":{"classes/BaseEntity.html":{}},"body":{"interfaces/ApiConfig.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{}}}],["baseentity:14",{"_index":219,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["baseentity:25",{"_index":218,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["baseentity:53",{"_index":213,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["baseentity:6",{"_index":212,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["baseentity:7",{"_index":214,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["baseentity:74",{"_index":216,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["baseentity:8",{"_index":215,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["bbdef336",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":59,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/EntityAttribute.html":{},"classes/FirebaseEntity.html":{}}}],["bootstrap",{"_index":418,"title":{},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["break",{"_index":199,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["brows",{"_index":575,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["bug",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["bundl",{"_index":480,"title":{},"body":{"index.html":{}}}],["c",{"_index":515,"title":{},"body":{"index.html":{},"license.html":{}}}],["call",{"_index":24,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["case",{"_index":195,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["certain",{"_index":26,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["chang",{"_index":371,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":359,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":526,"title":{},"body":{"license.html":{}}}],["claim",{"_index":563,"title":{},"body":{"license.html":{}}}],["class",{"_index":74,"title":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}},"body":{"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":503,"title":{},"body":{"index.html":{}}}],["collect",{"_index":20,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["collection.push(deseri",{"_index":99,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["collection.push(target",{"_index":256,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["collectionattribut",{"_index":13,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["collectionnam",{"_index":301,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["commonmodul",{"_index":326,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["compodoc/compodoc",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["condit",{"_index":546,"title":{},"body":{"license.html":{}}}],["config",{"_index":36,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"index.html":{}}}],["configur",{"_index":8,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"index.html":{}}}],["connect",{"_index":572,"title":{},"body":{"license.html":{}}}],["const",{"_index":60,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"interfaces/EntityAttribute.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{}}}],["constructor",{"_index":86,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["constructor(ent",{"_index":235,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["constructor(http",{"_index":169,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["constructor(priv",{"_index":149,"title":{},"body":{"injectables/DataContext.html":{}}}],["constructor(servicefactori",{"_index":139,"title":{},"body":{"injectables/DataContext.html":{}}}],["context",{"_index":456,"title":{},"body":{"index.html":{}}}],["contract",{"_index":567,"title":{},"body":{"license.html":{}}}],["copi",{"_index":529,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":514,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["coverag",{"_index":378,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":167,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"index.html":{}}}],["create(ent",{"_index":180,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["createcustom",{"_index":168,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["createcustom(datasourc",{"_index":182,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["current",{"_index":48,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["customserviceconfig",{"_index":41,"title":{"interfaces/CustomServiceConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"coverage.html":{}}}],["d",{"_index":94,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["damag",{"_index":564,"title":{},"body":{"license.html":{}}}],["data",{"_index":92,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"index.html":{}}}],["data.foreach((item",{"_index":252,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["data[d",{"_index":97,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["datacontext",{"_index":47,"title":{"injectables/DataContext.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["datacontext';th",{"_index":491,"title":{},"body":{"index.html":{}}}],["datacontext.umd.j",{"_index":488,"title":{},"body":{"index.html":{}}}],["datacontext/bundles/ngx",{"_index":487,"title":{},"body":{"index.html":{}}}],["dataservicefactori",{"_index":140,"title":{"injectables/DataServiceFactory.html":{}},"body":{"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasourc",{"_index":35,"title":{"interfaces/DataSource.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{}}}],["datasource.apiconfig",{"_index":204,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["datasource.ent",{"_index":152,"title":{},"body":{"injectables/DataContext.html":{}}}],["datasource.servic",{"_index":160,"title":{},"body":{"injectables/DataContext.html":{}}}],["datasource.service(datasource.ent",{"_index":203,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["datasource.services.foreach",{"_index":162,"title":{},"body":{"injectables/DataContext.html":{}}}],["datasource.typ",{"_index":194,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["datasourcetyp",{"_index":37,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"modules/NgxDataContextModule.html":{},"miscellaneous/enumerations.html":{}}}],["datasourcetype.firebas",{"_index":196,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["datasourcetype.firestor",{"_index":201,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["datasourcetype.rest",{"_index":200,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["datatosav",{"_index":286,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["datatosave[`${entity.entityname}/${newkey",{"_index":291,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["date(targetvalu",{"_index":135,"title":{},"body":{"classes/BaseEntity.html":{}}}],["deal",{"_index":532,"title":{},"body":{"license.html":{}}}],["declar",{"_index":339,"title":{},"body":{"modules/NgxDataContextModule.html":{},"index.html":{},"overview.html":{}}}],["decor",{"_index":337,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["decorators/attribute.decor",{"_index":118,"title":{},"body":{"classes/BaseEntity.html":{},"modules/NgxDataContextModule.html":{}}}],["decorators/entity.decor",{"_index":338,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["default",{"_index":90,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/DataServiceFactory.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":87,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["delet",{"_index":318,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["demo",{"_index":460,"title":{},"body":{"index.html":{}}}],["depend",{"_index":404,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{},"overview.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/EntityServiceConfig.html":{}}}],["deseri",{"_index":82,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["deserialize(target",{"_index":110,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["deserializeent",{"_index":77,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["differ",{"_index":497,"title":{},"body":{"index.html":{}}}],["direct",{"_index":462,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":539,"title":{},"body":{"license.html":{}}}],["doc(entity.id",{"_index":317,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["doc(entity.id).set(ent",{"_index":320,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["doc(entitytosave.id",{"_index":315,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["document",{"_index":379,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dynam",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["easili",{"_index":459,"title":{},"body":{"index.html":{}}}],["end",{"_index":501,"title":{},"body":{"index.html":{}}}],["entiti",{"_index":38,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["entity(nam",{"_index":454,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entity.deseri",{"_index":101,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["entity.deserialize(data",{"_index":102,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["entity.deserialize(item",{"_index":98,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["entity.entitynam",{"_index":311,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["entity.model",{"_index":31,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{}}}],["entity.model.t",{"_index":207,"title":{},"body":{"classes/FirebaseEntity.html":{},"coverage.html":{}}}],["entity.model.ts:4",{"_index":210,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["entity.model.ts:6",{"_index":217,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["entity.seri",{"_index":283,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["entityattribut",{"_index":63,"title":{"interfaces/EntityAttribute.html":{}},"body":{"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/EntityAttribute.html":{},"coverage.html":{}}}],["entitynam",{"_index":78,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["entityproperti",{"_index":388,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["entityproperty(ent",{"_index":455,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entityserviceconfig",{"_index":45,"title":{"interfaces/EntityServiceConfig.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"coverage.html":{}}}],["entitytosav",{"_index":289,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["entitytosave.id",{"_index":290,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["enum",{"_index":49,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["enumer",{"_index":448,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":297,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["error('method",{"_index":278,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["event",{"_index":559,"title":{},"body":{"license.html":{}}}],["exact",{"_index":495,"title":{},"body":{"index.html":{}}}],["exampl",{"_index":33,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["execut",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["export",{"_index":32,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"index.html":{},"overview.html":{}}}],["express",{"_index":552,"title":{},"body":{"license.html":{}}}],["extend",{"_index":208,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["factory.servic",{"_index":146,"title":{},"body":{"injectables/DataContext.html":{},"modules/NgxDataContextModule.html":{}}}],["factory.service.t",{"_index":166,"title":{},"body":{"injectables/DataServiceFactory.html":{},"coverage.html":{}}}],["factory.service.ts:14",{"_index":177,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["factory.service.ts:22",{"_index":181,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["factory.service.ts:50",{"_index":183,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["faker",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["fb",{"_index":173,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{}}}],["fb.database().ref",{"_index":271,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["fbdb",{"_index":171,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["fbstore",{"_index":175,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["field",{"_index":105,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["field.indexof('z",{"_index":106,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["find",{"_index":229,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["firebas",{"_index":50,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["firebaseapp",{"_index":174,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{}}}],["firebaseent",{"_index":190,"title":{"classes/FirebaseEntity.html":{}},"body":{"injectables/DataServiceFactory.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{}}}],["firebaserepositori",{"_index":187,"title":{"injectables/FirebaseRepository.html":{}},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firestor",{"_index":51,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["firestorerepositori",{"_index":192,"title":{"injectables/FirestoreRepository.html":{}},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fit",{"_index":555,"title":{},"body":{"license.html":{}}}],["fix",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":545,"title":{},"body":{"license.html":{}}}],["font",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["forc",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["forroot",{"_index":341,"title":{},"body":{"modules/NgxDataContextModule.html":{},"index.html":{}}}],["free",{"_index":525,"title":{},"body":{"license.html":{}}}],["function",{"_index":64,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["furnish",{"_index":544,"title":{},"body":{"license.html":{}}}],["get",{"_index":357,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["getal",{"_index":230,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["getbyid",{"_index":231,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["getbyid(id",{"_index":241,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["getisnew",{"_index":114,"title":{},"body":{"classes/BaseEntity.html":{}}}],["git",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["grant",{"_index":524,"title":{},"body":{"license.html":{}}}],["graph",{"_index":573,"title":{},"body":{"modules.html":{}}}],["handlecollectionrespons",{"_index":225,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["handleentityrespons",{"_index":226,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["header",{"_index":14,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["herebi",{"_index":523,"title":{},"body":{"license.html":{}}}],["higher",{"_index":467,"title":{},"body":{"index.html":{}}}],["highlightj",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["holder",{"_index":561,"title":{},"body":{"license.html":{}}}],["http",{"_index":178,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["httpclient",{"_index":170,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["httpclientmodul",{"_index":328,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["httpheader",{"_index":27,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["https://alfredoperez.github.io/ngx",{"_index":464,"title":{},"body":{"index.html":{}}}],["id",{"_index":79,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["identifi",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":266,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["impli",{"_index":553,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"index.html":{}}}],["includ",{"_index":437,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["inherit",{"_index":211,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["initi",{"_index":138,"title":{},"body":{"injectables/DataContext.html":{}}}],["inject",{"_index":136,"title":{"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{}},"body":{"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{},"overview.html":{}}}],["instal",{"_index":470,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":154,"title":{},"body":{"injectables/DataContext.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"interfaces/Repository.html":{}},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"interfaces/Repository.html":{},"coverage.html":{},"overview.html":{}}}],["isdat",{"_index":80,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["isent",{"_index":57,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{}}}],["isnan(date.parse(field",{"_index":108,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["isnew",{"_index":85,"title":{},"body":{"classes/BaseEntity.html":{}}}],["item",{"_index":34,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{}}}],["item.ent",{"_index":156,"title":{},"body":{"injectables/DataContext.html":{}}}],["item.nam",{"_index":157,"title":{},"body":{"injectables/DataContext.html":{}}}],["itemsref",{"_index":227,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["js",{"_index":429,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["keep",{"_index":284,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["kind",{"_index":551,"title":{},"body":{"license.html":{}}}],["legend",{"_index":577,"title":{},"body":{"overview.html":{}}}],["level",{"_index":500,"title":{},"body":{"index.html":{}}}],["liabil",{"_index":565,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":562,"title":{},"body":{"license.html":{}}}],["libs/.../attribute.decorator.t",{"_index":450,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["libs/.../core.module.t",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../datasource.model.t",{"_index":449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../ent",{"_index":452,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../entity.decorator.t",{"_index":451,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/core/src/lib/core.module.t",{"_index":325,"title":{},"body":{"modules/NgxDataContextModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["libs/core/src/lib/decorators/attribute.decorator.t",{"_index":56,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["libs/core/src/lib/decorators/ent",{"_index":386,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/core/src/lib/decorators/entity.decorator.t",{"_index":389,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["libs/core/src/lib/models/datasource.model.t",{"_index":5,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["libs/core/src/lib/models/entity.model.t",{"_index":75,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["libs/core/src/lib/models/entity.model.ts:14",{"_index":113,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/entity.model.ts:25",{"_index":111,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/entity.model.ts:49",{"_index":115,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/entity.model.ts:53",{"_index":103,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/entity.model.ts:6",{"_index":89,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/entity.model.ts:7",{"_index":104,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/entity.model.ts:74",{"_index":109,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/entity.model.ts:8",{"_index":88,"title":{},"body":{"classes/BaseEntity.html":{}}}],["libs/core/src/lib/models/firebas",{"_index":206,"title":{},"body":{"classes/FirebaseEntity.html":{},"coverage.html":{}}}],["libs/core/src/lib/models/repository.model.t",{"_index":343,"title":{},"body":{"interfaces/Repository.html":{},"coverage.html":{}}}],["libs/core/src/lib/models/repository.model.ts:10",{"_index":345,"title":{},"body":{"interfaces/Repository.html":{}}}],["libs/core/src/lib/models/repository.model.ts:12",{"_index":344,"title":{},"body":{"interfaces/Repository.html":{}}}],["libs/core/src/lib/models/repository.model.ts:14",{"_index":348,"title":{},"body":{"interfaces/Repository.html":{}}}],["libs/core/src/lib/models/repository.model.ts:16",{"_index":349,"title":{},"body":{"interfaces/Repository.html":{}}}],["libs/core/src/lib/models/repository.model.ts:6",{"_index":347,"title":{},"body":{"interfaces/Repository.html":{}}}],["libs/core/src/lib/models/repository.model.ts:8",{"_index":346,"title":{},"body":{"interfaces/Repository.html":{}}}],["libs/core/src/lib/services/datacontext.service.t",{"_index":137,"title":{},"body":{"injectables/DataContext.html":{},"coverage.html":{}}}],["libs/core/src/lib/services/datacontext.service.ts:13",{"_index":143,"title":{},"body":{"injectables/DataContext.html":{}}}],["libs/core/src/lib/services/datacontext.service.ts:9",{"_index":141,"title":{},"body":{"injectables/DataContext.html":{}}}],["libs/core/src/lib/services/firebas",{"_index":221,"title":{},"body":{"injectables/FirebaseRepository.html":{},"coverage.html":{}}}],["libs/core/src/lib/services/firestor",{"_index":300,"title":{},"body":{"injectables/FirestoreRepository.html":{},"coverage.html":{}}}],["libs/core/src/lib/services/repositori",{"_index":165,"title":{},"body":{"injectables/DataServiceFactory.html":{},"coverage.html":{}}}],["libs/core/src/lib/services/rest",{"_index":351,"title":{},"body":{"injectables/RestApiRepositoryService.html":{},"coverage.html":{}}}],["licens",{"_index":513,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":535,"title":{},"body":{"license.html":{}}}],["link",{"_index":43,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"index.html":{}}}],["list",{"_index":494,"title":{},"body":{"index.html":{}}}],["list(entity.entitynam",{"_index":281,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["list(this.entity.entitynam",{"_index":275,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["loader",{"_index":484,"title":{},"body":{"index.html":{}}}],["locat",{"_index":21,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["lodash",{"_index":117,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"dependencies.html":{}}}],["look",{"_index":485,"title":{},"body":{"index.html":{}}}],["main",{"_index":490,"title":{},"body":{"index.html":{}}}],["map",{"_index":264,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"index.html":{}}}],["match",{"_index":54,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["media",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["merchant",{"_index":554,"title":{},"body":{"license.html":{}}}],["merg",{"_index":321,"title":{},"body":{"injectables/FirestoreRepository.html":{},"license.html":{}}}],["method",{"_index":81,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"index.html":{}}}],["miscellan",{"_index":447,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":520,"title":{},"body":{"index.html":{},"license.html":{}}}],["models/datasource.model",{"_index":148,"title":{},"body":{"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"modules/NgxDataContextModule.html":{}}}],["models/entity.model",{"_index":147,"title":{},"body":{"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"modules/NgxDataContextModule.html":{},"injectables/RestApiRepositoryService.html":{}}}],["models/firebas",{"_index":191,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{}}}],["models/repository.model",{"_index":189,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["modifi",{"_index":537,"title":{},"body":{"license.html":{}}}],["modul",{"_index":323,"title":{"modules/NgxDataContextModule.html":{},"modules.html":{}},"body":{"modules/NgxDataContextModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["modulewithprovid",{"_index":329,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["name",{"_index":42,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":481,"title":{},"body":{"index.html":{}}}],["new",{"_index":71,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"injectables/DataServiceFactory.html":{},"interfaces/EntityAttribute.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{}}}],["newkey",{"_index":287,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["ng",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["ngmodul",{"_index":330,"title":{},"body":{"modules/NgxDataContextModule.html":{},"index.html":{}}}],["ngrx/effect",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["ngx",{"_index":441,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ngxdatacontextmodul",{"_index":324,"title":{"modules/NgxDataContextModule.html":{}},"body":{"modules/NgxDataContextModule.html":{},"index.html":{},"modules.html":{}}}],["ngxdatacontextmodule.forroot",{"_index":507,"title":{},"body":{"index.html":{}}}],["node_modules/ngx",{"_index":486,"title":{},"body":{"index.html":{}}}],["noninfring",{"_index":558,"title":{},"body":{"license.html":{}}}],["note:if",{"_index":476,"title":{},"body":{"index.html":{}}}],["notic",{"_index":505,"title":{},"body":{"index.html":{},"license.html":{}}}],["now",{"_index":473,"title":{},"body":{"index.html":{}}}],["npm",{"_index":367,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["nrwl/nx",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":96,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["object(`${this.entity.entityname}/${id",{"_index":272,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["observ",{"_index":238,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["obtain",{"_index":528,"title":{},"body":{"license.html":{}}}],["onc",{"_index":489,"title":{},"body":{"index.html":{}}}],["option",{"_index":12,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"miscellaneous/functions.html":{}}}],["options.serializednam",{"_index":72,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{}}}],["order",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["othercompon",{"_index":510,"title":{},"body":{"index.html":{}}}],["othermodul",{"_index":511,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":569,"title":{},"body":{"license.html":{}}}],["out",{"_index":571,"title":{},"body":{"license.html":{},"overview.html":{}}}],["overview",{"_index":576,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":403,"title":{"dependencies.html":{}},"body":{}}],["paramet",{"_index":112,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":493,"title":{},"body":{"index.html":{}}}],["particular",{"_index":556,"title":{},"body":{"license.html":{}}}],["perez",{"_index":518,"title":{},"body":{"index.html":{},"license.html":{}}}],["permiss",{"_index":522,"title":{},"body":{"license.html":{}}}],["permit",{"_index":543,"title":{},"body":{"license.html":{}}}],["person",{"_index":527,"title":{},"body":{"license.html":{}}}],["pipe(map(this.handlecollectionrespons",{"_index":276,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["pipe(map(this.handleentityrespons",{"_index":274,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["point",{"_index":478,"title":{},"body":{"index.html":{}}}],["portion",{"_index":549,"title":{},"body":{"license.html":{}}}],["privat",{"_index":76,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/DataServiceFactory.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["promis",{"_index":245,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["promise.resolve(undefin",{"_index":279,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["properti",{"_index":11,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["property.decorator.t",{"_index":387,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["propertydecor",{"_index":65,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{}}}],["provid",{"_index":342,"title":{},"body":{"modules/NgxDataContextModule.html":{},"license.html":{},"overview.html":{}}}],["public",{"_index":224,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["publish",{"_index":538,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":557,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["remain",{"_index":492,"title":{},"body":{"index.html":{}}}],["remov",{"_index":232,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["remove(ent",{"_index":243,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["renam",{"_index":46,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["repositori",{"_index":145,"title":{"interfaces/Repository.html":{}},"body":{"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{}}}],["repository.servic",{"_index":188,"title":{},"body":{"injectables/DataServiceFactory.html":{},"modules/NgxDataContextModule.html":{}}}],["repository.service.t",{"_index":222,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{}}}],["repository.service.ts:10",{"_index":354,"title":{},"body":{"injectables/RestApiRepositoryService.html":{}}}],["repository.service.ts:103",{"_index":257,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:12",{"_index":303,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:13",{"_index":261,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["repository.service.ts:14",{"_index":250,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:15",{"_index":236,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:16",{"_index":353,"title":{},"body":{"injectables/RestApiRepositoryService.html":{}}}],["repository.service.ts:18",{"_index":251,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:19",{"_index":352,"title":{},"body":{"injectables/RestApiRepositoryService.html":{}}}],["repository.service.ts:20",{"_index":306,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:22",{"_index":355,"title":{},"body":{"injectables/RestApiRepositoryService.html":{}}}],["repository.service.ts:25",{"_index":356,"title":{},"body":{"injectables/RestApiRepositoryService.html":{}}}],["repository.service.ts:27",{"_index":305,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:30",{"_index":242,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:33",{"_index":304,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:37",{"_index":240,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:44",{"_index":239,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:46",{"_index":307,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:48",{"_index":244,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:54",{"_index":249,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:59",{"_index":309,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:62",{"_index":237,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:69",{"_index":308,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["repository.service.ts:76",{"_index":247,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repository.service.ts:93",{"_index":259,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["repres",{"_index":7,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["requir",{"_index":465,"title":{},"body":{"index.html":{}}}],["reset",{"_index":579,"title":{},"body":{"overview.html":{}}}],["respons",{"_index":23,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["rest",{"_index":52,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["restapirepositoryservic",{"_index":350,"title":{"injectables/RestApiRepositoryService.html":{}},"body":{"injectables/RestApiRepositoryService.html":{},"coverage.html":{}}}],["restrict",{"_index":534,"title":{},"body":{"license.html":{}}}],["result",{"_index":53,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result[attr.nam",{"_index":124,"title":{},"body":{"classes/BaseEntity.html":{}}}],["return",{"_index":25,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["right",{"_index":536,"title":{},"body":{"license.html":{}}}],["root",{"_index":498,"title":{},"body":{"index.html":{}}}],["rxj",{"_index":263,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"dependencies.html":{}}}],["rxjs/oper",{"_index":265,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["save",{"_index":474,"title":{},"body":{"index.html":{}}}],["savedata",{"_index":233,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["savedata(data",{"_index":246,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["script",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["sdkdb",{"_index":228,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["sell",{"_index":542,"title":{},"body":{"license.html":{}}}],["serial",{"_index":83,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["serializednam",{"_index":58,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{}}}],["servic",{"_index":40,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"modules/NgxDataContextModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servicefactori",{"_index":142,"title":{},"body":{"injectables/DataContext.html":{}}}],["services/datacontext.servic",{"_index":335,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["services/firebas",{"_index":333,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["services/firestor",{"_index":334,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["services/repositori",{"_index":336,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["set(entitytosav",{"_index":316,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["shall",{"_index":547,"title":{},"body":{"license.html":{}}}],["similar",{"_index":504,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":509,"title":{},"body":{"index.html":{}}}],["slightli",{"_index":496,"title":{},"body":{"index.html":{}}}],["softwar",{"_index":530,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"modules/NgxDataContextModule.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["specif",{"_index":44,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["start",{"_index":358,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statement",{"_index":381,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":340,"title":{},"body":{"modules/NgxDataContextModule.html":{}}}],["store",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["subject",{"_index":262,"title":{},"body":{"injectables/FirebaseRepository.html":{},"license.html":{}}}],["subject.asobserv",{"_index":299,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["subject.complet",{"_index":296,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["subject.error(err",{"_index":298,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["subject.next(v",{"_index":295,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["sublicens",{"_index":540,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":548,"title":{},"body":{"license.html":{}}}],["switch",{"_index":193,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["symbol('attributemetadata",{"_index":62,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{},"miscellaneous/variables.html":{}}}],["system",{"_index":483,"title":{},"body":{"index.html":{}}}],["systemj",{"_index":475,"title":{},"body":{"index.html":{}}}],["t",{"_index":254,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{}}}],["tabl",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":66,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"interfaces/EntityAttribute.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["target.attribut",{"_index":69,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{}}}],["target.attributes.push",{"_index":73,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"interfaces/EntityAttribute.html":{}}}],["target.deserialize(data",{"_index":258,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["target.deserialize(item",{"_index":255,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["target.hasownproperty(attr.options.serializednam",{"_index":129,"title":{},"body":{"classes/BaseEntity.html":{}}}],["target.id",{"_index":126,"title":{},"body":{"classes/BaseEntity.html":{}}}],["target[attr.options.serializednam",{"_index":131,"title":{},"body":{"classes/BaseEntity.html":{}}}],["targetvalu",{"_index":130,"title":{},"body":{"classes/BaseEntity.html":{}}}],["tell",{"_index":482,"title":{},"body":{"index.html":{}}}],["test",{"_index":468,"title":{},"body":{"index.html":{}}}],["this.afs.collection(this.collectionnam",{"_index":313,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["this.afs.collection(this.entity.entitynam",{"_index":319,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["this.afs.createid",{"_index":314,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["this.afs.doc(`${this.entity.entityname}/${id",{"_index":312,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["this.angularfir",{"_index":269,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["this.angularfire.list(`${entity.entityname}`).remove(entity.id",{"_index":280,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["this.attribut",{"_index":121,"title":{},"body":{"classes/BaseEntity.html":{}}}],["this.attributes.foreach((attr",{"_index":122,"title":{},"body":{"classes/BaseEntity.html":{}}}],["this.collectionnam",{"_index":310,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["this.datasourc",{"_index":150,"title":{},"body":{"injectables/DataContext.html":{}}}],["this.datasources.foreach(datasourc",{"_index":151,"title":{},"body":{"injectables/DataContext.html":{}}}],["this.deserializeentity((thi",{"_index":133,"title":{},"body":{"classes/BaseEntity.html":{}}}],["this.entitynam",{"_index":119,"title":{},"body":{"classes/BaseEntity.html":{}}}],["this.fb",{"_index":198,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["this.fbdb",{"_index":197,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["this.fbstor",{"_index":202,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["this.http",{"_index":205,"title":{},"body":{"injectables/DataServiceFactory.html":{}}}],["this.id",{"_index":125,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{}}}],["this.isdate(targetvalu",{"_index":134,"title":{},"body":{"classes/BaseEntity.html":{}}}],["this.itemsref",{"_index":267,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["this.savedata(datatosav",{"_index":292,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["this.sdkdb",{"_index":270,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["this.sdkdb.child(entity.entityname).push().key",{"_index":288,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["this.sdkdb.update(data).then",{"_index":293,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["this.servicefactory.cr",{"_index":159,"title":{},"body":{"injectables/DataContext.html":{}}}],["this.servicefactory.createcustom",{"_index":164,"title":{},"body":{"injectables/DataContext.html":{}}}],["this['nam",{"_index":220,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["throw",{"_index":277,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["top",{"_index":499,"title":{},"body":{"index.html":{}}}],["torecord",{"_index":209,"title":{},"body":{"classes/FirebaseEntity.html":{}}}],["tort",{"_index":568,"title":{},"body":{"license.html":{}}}],["track",{"_index":285,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["true",{"_index":322,"title":{},"body":{"injectables/FirestoreRepository.html":{}}}],["type",{"_index":17,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"interfaces/CustomServiceConfig.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/DataSource.html":{},"interfaces/EntityAttribute.html":{},"interfaces/EntityServiceConfig.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":95,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"classes/FirebaseEntity.html":{}}}],["umd",{"_index":479,"title":{},"body":{"index.html":{}}}],["undefin",{"_index":70,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"classes/BaseEntity.html":{},"injectables/DataContext.html":{},"injectables/DataServiceFactory.html":{},"interfaces/EntityAttribute.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{}}}],["under",{"_index":519,"title":{},"body":{"index.html":{}}}],["up",{"_index":502,"title":{},"body":{"index.html":{}}}],["updat",{"_index":234,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["update(ent",{"_index":248,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"interfaces/Repository.html":{},"injectables/RestApiRepositoryService.html":{}}}],["update(entity.id",{"_index":282,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["url",{"_index":15,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{}}}],["us",{"_index":22,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CustomServiceConfig.html":{},"interfaces/DataSource.html":{},"interfaces/EntityServiceConfig.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":512,"title":{},"body":{"index.html":{}}}],["val",{"_index":294,"title":{},"body":{"injectables/FirebaseRepository.html":{}}}],["valu",{"_index":91,"title":{},"body":{"classes/BaseEntity.html":{},"classes/FirebaseEntity.html":{},"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{},"miscellaneous/variables.html":{}}}],["valuechang",{"_index":273,"title":{},"body":{"injectables/FirebaseRepository.html":{},"injectables/FirestoreRepository.html":{}}}],["variabl",{"_index":382,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["via",{"_index":472,"title":{},"body":{"index.html":{}}}],["view",{"_index":461,"title":{},"body":{"index.html":{}}}],["void",{"_index":68,"title":{},"body":{"interfaces/AttributeDecoratorOptions.html":{},"injectables/DataContext.html":{},"interfaces/EntityAttribute.html":{}}}],["warranti",{"_index":550,"title":{},"body":{"license.html":{}}}],["whether",{"_index":566,"title":{},"body":{"license.html":{}}}],["without",{"_index":533,"title":{},"body":{"license.html":{}}}],["ye",{"_index":179,"title":{},"body":{"injectables/DataServiceFactory.html":{},"injectables/FirebaseRepository.html":{},"miscellaneous/functions.html":{}}}],["zone.j",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":578,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiConfig.html":{"url":"interfaces/ApiConfig.html","title":"interface - ApiConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ApiConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/models/datasource.model.ts\n        \n\n            \n                Description\n            \n            \n                Interface representing the configuration for an api.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        collectionAttribute\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collectionAttribute\n                                    \n                                \n                                \n                                    \n                                        collectionAttribute:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Attribute where the collection will be located.\nThis is useful when the response a get() call that\nreturns a collection in a certain attribute.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     HttpHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpHeaders } from '@angular/common/http';\n\nimport { BaseEntity } from './entity.model';\n\n/**\n * Interface representing the configuration for an api.\n *\n */\nexport interface ApiConfig {\n  url: string;\n  /**\n   * Attribute where the collection will be located.\n   * This is useful when the response a get() call that\n   * returns a collection in a certain attribute.\n   * @example 'items' when response is like {items:[]}\n   */\n  collectionAttribute?: string;\n  headers?: HttpHeaders;\n}\n\nexport interface DataSource {\n  config?: ApiConfig;\n  type: DataSourceType;\n  entities?: Array | Array;\n  services?: Array;\n}\n\nexport interface CustomServiceConfig {\n  name: string;\n  entity: BaseEntity;\n  service: any;\n}\n/**\n * Configuration for services linked to specific entity.\n * @export\n */\nexport interface EntityServiceConfig {\n  /**\n   * Renames the property used in datacontext for\n   * the current entity service.\n   */\n  name?: string;\n\n  entity: BaseEntity;\n}\n\nexport enum DataSourceType {\n  firebase,\n  firestore,\n  rest\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AttributeDecoratorOptions.html":{"url":"interfaces/AttributeDecoratorOptions.html","title":"interface - AttributeDecoratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AttributeDecoratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/decorators/attribute.decorator.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        isEntity\n                                \n                                \n                                            Optional\n                                        serializedName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isEntity\n                                    \n                                \n                                \n                                    \n                                        isEntity:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serializedName\n                                    \n                                \n                                \n                                    \n                                        serializedName:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const ATTRIBUTE_METADATA = Symbol('AttributeMetadata');\n\nexport interface EntityAttribute {\n  name: string;\n  options: AttributeDecoratorOptions;\n}\n\nexport interface AttributeDecoratorOptions {\n  serializedName?: string;\n  isEntity?: boolean;\n}\n\nexport function Attribute(\n  options: AttributeDecoratorOptions = {}\n): PropertyDecorator {\n  return (target: any, attributeKey: any): void => {\n    if (target.attributes === undefined)\n      target.attributes = new Array();\n\n    if (options.serializedName === undefined)\n      options.serializedName = attributeKey;\n\n    target.attributes.push({\n      name: attributeKey,\n      options\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/models/entity.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Private\n                                deserializeEntity\n                            \n                            \n                                entityName\n                            \n                            \n                                id\n                            \n                            \n                                    Private\n                                isDate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deserialize\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isNew\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/models/entity.model.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attributes\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        attributes:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/models/entity.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            deserializeEntity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deserializeEntity:     \n\n                    \n                \n                    \n                        \n                            Default value : (entity: any, data: any): any => {\n    if (entity === undefined || data === undefined) return undefined;\n\n    let result;\n    if (Array.isArray(data)) {\n      const collection = [];\n      for (const d in data)\n        if (d !== undefined) {\n          const item = typeof data === 'object' ? data[d] : data;\n          const deserialize = entity.deserialize(item);\n          collection.push(deserialize);\n        }\n\n      result = collection;\n    } else if (!_.isEmpty(entity))\n      result =\n        entity.deserialize !== undefined ? entity.deserialize(data) : data;\n\n    return result;\n  }\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/models/entity.model.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entityName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        entityName:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/models/entity.model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/models/entity.model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isDate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isDate:     \n\n                    \n                \n                    \n                        \n                            Default value : (field: any): boolean => {\n    return (\n      typeof field === 'string' &&\n      field.indexOf('Z') !== -1 &&\n      !isNaN(Date.parse(field))\n    );\n  }\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/models/entity.model.ts:74\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deserialize\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeserialize(target: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/entity.model.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     BaseEntity\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serialize\n                            \n                            \n                        \n                    \n                \n                \n                    \nserialize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/entity.model.ts:14\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isNew\n                    \n                \n\n                \n                    \n                        getisNew()\n                    \n                \n                            \n                                \n                                    Defined in libs/core/src/lib/models/entity.model.ts:49\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import * as _ from 'lodash';\n\nimport { EntityAttribute } from '../decorators/attribute.decorator';\n\nexport class BaseEntity {\n  attributes: Array;\n  entityName: string;\n  id: any;\n\n  constructor() {\n    this.entityName = (this as any).$$name;\n  }\n\n  serialize(): any {\n    if (this.attributes === undefined) return undefined;\n    const result: any = {};\n    this.attributes.forEach((attr: EntityAttribute) => {\n      if ((this as any)[attr.name] !== undefined)\n        result[attr.name] = (this as any)[attr.name];\n    });\n\n    return result;\n  }\n\n  deserialize(target: any): BaseEntity {\n\n    if (this.attributes === undefined) return this;\n\n    this.id = target.id;\n\n    this.attributes.forEach((attr: EntityAttribute) => {\n      if (\n        attr.options === undefined ||\n        attr.options.serializedName === undefined ||\n        !target.hasOwnProperty(attr.options.serializedName)\n      )\n        return this;\n\n      const targetValue = target[attr.options.serializedName];\n\n      (this as any)[attr.name] = attr.options.isEntity\n        ? this.deserializeEntity((this as any)[attr.name], targetValue)\n        : this.isDate(targetValue) ? new Date(targetValue) : targetValue;\n    });\n\n    return this;\n  }\n\n  get isNew(): boolean {\n    return this.id === undefined;\n  }\n\n  private deserializeEntity = (entity: any, data: any): any => {\n    if (entity === undefined || data === undefined) return undefined;\n\n    let result;\n    if (Array.isArray(data)) {\n      const collection = [];\n      for (const d in data)\n        if (d !== undefined) {\n          const item = typeof data === 'object' ? data[d] : data;\n          const deserialize = entity.deserialize(item);\n          collection.push(deserialize);\n        }\n\n      result = collection;\n    } else if (!_.isEmpty(entity))\n      result =\n        entity.deserialize !== undefined ? entity.deserialize(data) : data;\n\n    return result;\n  }\n\n  private isDate = (field: any): boolean => {\n    return (\n      typeof field === 'string' &&\n      field.indexOf('Z') !== -1 &&\n      !isNaN(Date.parse(field))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomServiceConfig.html":{"url":"interfaces/CustomServiceConfig.html","title":"interface - CustomServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CustomServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/models/datasource.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        entity\n                                \n                                \n                                        name\n                                \n                                \n                                        service\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entity\n                                    \n                                \n                                \n                                    \n                                        entity:     BaseEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                    \n                                \n                                \n                                    \n                                        service:     any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpHeaders } from '@angular/common/http';\n\nimport { BaseEntity } from './entity.model';\n\n/**\n * Interface representing the configuration for an api.\n *\n */\nexport interface ApiConfig {\n  url: string;\n  /**\n   * Attribute where the collection will be located.\n   * This is useful when the response a get() call that\n   * returns a collection in a certain attribute.\n   * @example 'items' when response is like {items:[]}\n   */\n  collectionAttribute?: string;\n  headers?: HttpHeaders;\n}\n\nexport interface DataSource {\n  config?: ApiConfig;\n  type: DataSourceType;\n  entities?: Array | Array;\n  services?: Array;\n}\n\nexport interface CustomServiceConfig {\n  name: string;\n  entity: BaseEntity;\n  service: any;\n}\n/**\n * Configuration for services linked to specific entity.\n * @export\n */\nexport interface EntityServiceConfig {\n  /**\n   * Renames the property used in datacontext for\n   * the current entity service.\n   */\n  name?: string;\n\n  entity: BaseEntity;\n}\n\nexport enum DataSourceType {\n  firebase,\n  firestore,\n  rest\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataContext.html":{"url":"injectables/DataContext.html","title":"injectable - DataContext","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DataContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/services/datacontext.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                datasources\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(serviceFactory: DataServiceFactory)\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/services/datacontext.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        serviceFactory\n                                                  \n                                                        \n                                                                    DataServiceFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initialize\n                            \n                            \n                        \n                    \n                \n                \n                    \ninitialize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/datacontext.service.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            datasources\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        datasources:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/datacontext.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { DataServiceFactory } from './repository-factory.service';\nimport { BaseEntity } from '../models/entity.model';\nimport { CustomServiceConfig, DataSource } from '../models/datasource.model';\n\n@Injectable()\nexport class DataContext {\n  datasources: Array;\n\n  constructor(private serviceFactory: DataServiceFactory) { }\n\n  initialize(): void {\n    if (this.datasources !== undefined)\n      this.datasources.forEach(datasource => {\n        if (\n          datasource.entities !== undefined &&\n          Array.isArray(datasource.entities)\n        )\n          for (const item of datasource.entities) {\n            let entity: BaseEntity;\n            let target: string;\n\n            if (item instanceof BaseEntity) {\n              entity = item as BaseEntity;\n              target = (entity as any)['$$name'];\n            } else {\n              entity = item.entity;\n              target =\n                item.name !== undefined ? item.name : (entity as any)['$$name'];\n            }\n\n            (this as any)[target] = this.serviceFactory.create(\n              entity,\n              datasource\n            );\n          }\n\n        if (\n          datasource.services !== undefined &&\n          Array.isArray(datasource.services)\n        )\n          datasource.services.forEach(\n            (config: CustomServiceConfig) => {\n              (this as any)[config.name] = this.serviceFactory.createCustom(\n                datasource\n              );\n            }\n          );\n      });\n  }\n}\n\n//                 const entity = (item typeof EntityServiceConfig)\n//                 ? item.entity\n//                 : item;\n//         const target = (item typeof EntityServiceConfig && item.name !== undefined)\n//         ? (item.entity as any)['$$name']\n//         : item.name;\n\n// (this as any)[target] = this.serviceFactory.create(\n//     entity,\n//     datasource\n// );\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataServiceFactory.html":{"url":"injectables/DataServiceFactory.html","title":"injectable - DataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/services/repository-factory.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                createCustom\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, fbDb?: AngularFireDatabase, fb?: FirebaseApp, fbStore?: AngularFirestore)\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/services/repository-factory.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fbDb\n                                                  \n                                                        \n                                                                    AngularFireDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FirebaseApp\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        fbStore\n                                                  \n                                                        \n                                                                    AngularFirestore\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreate(entity: BaseEntity, datasource: DataSource)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/repository-factory.service.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    BaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        datasource\n                                                        \n                                                                    DataSource\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Repository | undefined\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createCustom\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreateCustom(datasource: DataSource)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/repository-factory.service.ts:50\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        datasource\n                                                        \n                                                                    DataSource\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { FirebaseApp } from '@angular/fire';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { FirebaseRepository } from './firebase-repository.service';\nimport { BaseEntity } from '../models/entity.model';\nimport { DataSource, DataSourceType } from '../models/datasource.model';\nimport { Repository } from '../models/repository.model';\nimport { FirebaseEntity } from '../models/firebase-entity.model';\nimport { FirestoreRepository } from './firestore-repository.service';\n\n@Injectable()\nexport class DataServiceFactory {\n  constructor(\n    private http: HttpClient,\n    private fbDb?: AngularFireDatabase,\n    private fb?: FirebaseApp,\n    private fbStore?: AngularFirestore\n  ) { }\n\n  create(\n    entity: BaseEntity,\n    datasource: DataSource\n  ): Repository | undefined {\n    let service;\n    switch (datasource.type) {\n      case DataSourceType.firebase:\n        service = new FirebaseRepository(\n          entity as FirebaseEntity,\n          this.fbDb,\n          this.fb\n        );\n        break;\n      case DataSourceType.rest:\n        break;\n      case DataSourceType.firestore:\n        service = new FirestoreRepository(\n          entity as FirebaseEntity,\n          this.fbStore\n        );\n        break;\n      default:\n        break;\n    }\n\n    return service;\n  }\n\n  createCustom(datasource: DataSource): any {\n    // return new datasource.service(datasource.entity, datasource.apiConfig, this.http);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataSource.html":{"url":"interfaces/DataSource.html","title":"interface - DataSource","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataSource\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/models/datasource.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        config\n                                \n                                \n                                            Optional\n                                        entities\n                                \n                                \n                                            Optional\n                                        services\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     ApiConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ApiConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        entities\n                                    \n                                \n                                \n                                    \n                                        entities:     Array | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array | Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                    \n                                \n                                \n                                    \n                                        services:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     DataSourceType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     DataSourceType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpHeaders } from '@angular/common/http';\n\nimport { BaseEntity } from './entity.model';\n\n/**\n * Interface representing the configuration for an api.\n *\n */\nexport interface ApiConfig {\n  url: string;\n  /**\n   * Attribute where the collection will be located.\n   * This is useful when the response a get() call that\n   * returns a collection in a certain attribute.\n   * @example 'items' when response is like {items:[]}\n   */\n  collectionAttribute?: string;\n  headers?: HttpHeaders;\n}\n\nexport interface DataSource {\n  config?: ApiConfig;\n  type: DataSourceType;\n  entities?: Array | Array;\n  services?: Array;\n}\n\nexport interface CustomServiceConfig {\n  name: string;\n  entity: BaseEntity;\n  service: any;\n}\n/**\n * Configuration for services linked to specific entity.\n * @export\n */\nexport interface EntityServiceConfig {\n  /**\n   * Renames the property used in datacontext for\n   * the current entity service.\n   */\n  name?: string;\n\n  entity: BaseEntity;\n}\n\nexport enum DataSourceType {\n  firebase,\n  firestore,\n  rest\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityAttribute.html":{"url":"interfaces/EntityAttribute.html","title":"interface - EntityAttribute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EntityAttribute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/decorators/attribute.decorator.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        options\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                    \n                                \n                                \n                                    \n                                        options:     AttributeDecoratorOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AttributeDecoratorOptions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export const ATTRIBUTE_METADATA = Symbol('AttributeMetadata');\n\nexport interface EntityAttribute {\n  name: string;\n  options: AttributeDecoratorOptions;\n}\n\nexport interface AttributeDecoratorOptions {\n  serializedName?: string;\n  isEntity?: boolean;\n}\n\nexport function Attribute(\n  options: AttributeDecoratorOptions = {}\n): PropertyDecorator {\n  return (target: any, attributeKey: any): void => {\n    if (target.attributes === undefined)\n      target.attributes = new Array();\n\n    if (options.serializedName === undefined)\n      options.serializedName = attributeKey;\n\n    target.attributes.push({\n      name: attributeKey,\n      options\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityServiceConfig.html":{"url":"interfaces/EntityServiceConfig.html","title":"interface - EntityServiceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EntityServiceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/models/datasource.model.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for services linked to specific entity.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        entity\n                                \n                                \n                                            Optional\n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entity\n                                    \n                                \n                                \n                                    \n                                        entity:     BaseEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Renames the property used in datacontext for\nthe current entity service.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpHeaders } from '@angular/common/http';\n\nimport { BaseEntity } from './entity.model';\n\n/**\n * Interface representing the configuration for an api.\n *\n */\nexport interface ApiConfig {\n  url: string;\n  /**\n   * Attribute where the collection will be located.\n   * This is useful when the response a get() call that\n   * returns a collection in a certain attribute.\n   * @example 'items' when response is like {items:[]}\n   */\n  collectionAttribute?: string;\n  headers?: HttpHeaders;\n}\n\nexport interface DataSource {\n  config?: ApiConfig;\n  type: DataSourceType;\n  entities?: Array | Array;\n  services?: Array;\n}\n\nexport interface CustomServiceConfig {\n  name: string;\n  entity: BaseEntity;\n  service: any;\n}\n/**\n * Configuration for services linked to specific entity.\n * @export\n */\nexport interface EntityServiceConfig {\n  /**\n   * Renames the property used in datacontext for\n   * the current entity service.\n   */\n  name?: string;\n\n  entity: BaseEntity;\n}\n\nexport enum DataSourceType {\n  firebase,\n  firestore,\n  rest\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FirebaseEntity.html":{"url":"classes/FirebaseEntity.html","title":"class - FirebaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FirebaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/models/firebase-entity.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                attributes\n                            \n                            \n                                    Private\n                                deserializeEntity\n                            \n                            \n                                entityName\n                            \n                            \n                                id\n                            \n                            \n                                    Private\n                                isDate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toRecord\n                            \n                            \n                                deserialize\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/models/firebase-entity.model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attributes\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        attributes:     Array\n\n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseEntity:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            deserializeEntity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        deserializeEntity:     \n\n                    \n                \n                    \n                        \n                            Default value : (entity: any, data: any): any => {\n    if (entity === undefined || data === undefined) return undefined;\n\n    let result;\n    if (Array.isArray(data)) {\n      const collection = [];\n      for (const d in data)\n        if (d !== undefined) {\n          const item = typeof data === 'object' ? data[d] : data;\n          const deserialize = entity.deserialize(item);\n          collection.push(deserialize);\n        }\n\n      result = collection;\n    } else if (!_.isEmpty(entity))\n      result =\n        entity.deserialize !== undefined ? entity.deserialize(data) : data;\n\n    return result;\n  }\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseEntity:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entityName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        entityName:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseEntity:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseEntity:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            isDate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isDate:     \n\n                    \n                \n                    \n                        \n                            Default value : (field: any): boolean => {\n    return (\n      typeof field === 'string' &&\n      field.indexOf('Z') !== -1 &&\n      !isNaN(Date.parse(field))\n    );\n  }\n                        \n                    \n                            \n                                \n                                    Inherited from     BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseEntity:74\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            toRecord\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toRecord()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/firebase-entity.model.ts:6\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deserialize\n                            \n                            \n                        \n                    \n                \n                \n                    \ndeserialize(target: any)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseEntity:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     BaseEntity\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            serialize\n                            \n                            \n                        \n                    \n                \n                \n                    \nserialize()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     BaseEntity\n\n                                \n                            \n                        \n                            \n                                    Defined in BaseEntity:14\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity } from './entity.model';\n\nexport class FirebaseEntity extends BaseEntity {\n  name: string;\n\n  private toRecord(): any {\n    return {\n      id: this.id,\n      name: this['name']\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseRepository.html":{"url":"injectables/FirebaseRepository.html","title":"injectable - FirebaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/services/firebase-repository.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                angularfire\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Private\n                                handleCollectionResponse\n                            \n                            \n                                    Private\n                                handleEntityResponse\n                            \n                            \n                                itemsRef\n                            \n                            \n                                sdkDb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                getAll\n                            \n                            \n                                getById\n                            \n                            \n                                remove\n                            \n                            \n                                    Private\n                                saveData\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: FirebaseEntity, angularfire?: AngularFireDatabase, fb?: FirebaseApp)\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/services/firebase-repository.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        angularfire\n                                                  \n                                                        \n                                                                    AngularFireDatabase\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FirebaseApp\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreate(entity: FirebaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:62\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            find\n                            \n                            \n                        \n                    \n                \n                \n                    \nfind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAll\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getById\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetById(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:30\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \nremove(entity: FirebaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            saveData\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        saveData(data: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:76\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(entity: FirebaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:54\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            angularfire\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        angularfire:     AngularFireDatabase\n\n                    \n                \n                    \n                        \n                            Type :     AngularFireDatabase\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            entity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        entity:     FirebaseEntity\n\n                    \n                \n                    \n                        \n                            Type :     FirebaseEntity\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleCollectionResponse\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handleCollectionResponse:     \n\n                    \n                \n                    \n                        \n                            Default value : (data: any): Array => {\n    let result: Array = [];\n    if (Array.isArray(data)) {\n      const collection: Array = [];\n\n      data.forEach((item: any) => {\n        const target = _.cloneDeep(this.entity) as T;\n        target.deserialize(item);\n        collection.push(target);\n      });\n\n      result = collection;\n    }\n\n    return result;\n  }\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:103\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleEntityResponse\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handleEntityResponse:     \n\n                    \n                \n                    \n                        \n                            Default value : (data: any): T => {\n    let result: T;\n\n    const target = _.cloneDeep(this.entity) as T;\n    target.deserialize(data);\n    result = target;\n\n    return result;\n  }\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:93\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            itemsRef\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        itemsRef:     AngularFireList\n\n                    \n                \n                    \n                        \n                            Type :     AngularFireList\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sdkDb\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        sdkDb:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firebase-repository.service.ts:13\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { FirebaseApp } from '@angular/fire';\nimport { AngularFireDatabase, AngularFireList } from '@angular/fire/database'\nimport * as _ from 'lodash';\nimport { Observable, Subject, of} from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FirebaseEntity } from '../models/firebase-entity.model';\nimport { Repository } from '../models/repository.model';\n\n@Injectable()\nexport class FirebaseRepository\n  implements Repository {\n  sdkDb: any;\n  angularfire: AngularFireDatabase;\n  itemsRef: AngularFireList;\n\n  constructor(\n    public entity: FirebaseEntity,\n    angularfire?: AngularFireDatabase,\n    fb?: FirebaseApp\n  ) {\n    if (angularfire !== undefined) {\n      this.itemsRef = angularfire.list(`${this.entity.entityName}`);\n      this.angularfire = angularfire;\n    }\n\n    if (fb !== undefined) this.sdkDb = fb.database().ref('/');\n  }\n\n  getById(id: string): Observable {\n    return this.angularfire\n      .object(`${this.entity.entityName}/${id}`)\n      .valueChanges()\n      .pipe(map(this.handleEntityResponse));\n  }\n\n  getAll(): Observable> {\n    return this.angularfire\n      .list(this.entity.entityName)\n      .valueChanges()\n      .pipe(map(this.handleCollectionResponse));\n  }\n\n  find(): Observable> {\n    throw new Error('Method not implemented.');\n  }\n\n  remove(entity: FirebaseEntity): Promise {\n    if (!entity) return Promise.resolve(undefined);\n\n    return this.angularfire.list(`${entity.entityName}`).remove(entity.id);\n  }\n\n  update(entity: FirebaseEntity): Promise {\n    if (!entity) return Promise.resolve(undefined);\n\n    return this.angularfire\n      .list(entity.entityName)\n      .update(entity.id, { ...entity.serialize() });\n  }\n\n  create(entity: FirebaseEntity): Observable {\n    if (!entity) return of();\n    // to keep track of ids\n\n    const dataToSave: any = {};\n    const newKey = this.sdkDb.child(entity.entityName).push().key;\n    const entityToSave = { ...entity.serialize() };\n    entityToSave.id = newKey;\n\n    dataToSave[`${entity.entityName}/${newKey}`] = entityToSave;\n\n    return this.saveData(dataToSave);\n  }\n\n  private saveData(data: any): Observable {\n    const subject = new Subject();\n\n    this.sdkDb.update(data).then(\n      (val: any) => {\n        subject.next(val);\n        subject.complete();\n      },\n      (err: any) => {\n        subject.error(err);\n        subject.complete();\n      }\n    );\n\n    return subject.asObservable();\n  }\n\n  private handleEntityResponse = (data: any): T => {\n    let result: T;\n\n    const target = _.cloneDeep(this.entity) as T;\n    target.deserialize(data);\n    result = target;\n\n    return result;\n  }\n\n  private handleCollectionResponse = (data: any): Array => {\n    let result: Array = [];\n    if (Array.isArray(data)) {\n      const collection: Array = [];\n\n      data.forEach((item: any) => {\n        const target = _.cloneDeep(this.entity) as T;\n        target.deserialize(item);\n        collection.push(target);\n      });\n\n      result = collection;\n    }\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirestoreRepository.html":{"url":"injectables/FirestoreRepository.html","title":"injectable - FirestoreRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirestoreRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/services/firestore-repository.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                collectionName\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Private\n                                handleCollectionResponse\n                            \n                            \n                                    Private\n                                handleEntityResponse\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                getAll\n                            \n                            \n                                getById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entity: FirebaseEntity, afs: AngularFirestore)\n                    \n                \n                        \n                            \n                                Defined in libs/core/src/lib/services/firestore-repository.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                  \n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        afs\n                                                  \n                                                        \n                                                                    AngularFirestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreate(entity: FirebaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            find\n                            \n                            \n                        \n                    \n                \n                \n                    \nfind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAll\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:27\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getById\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetById(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \nremove(entity: FirebaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:46\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(entity: FirebaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:54\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    FirebaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            collectionName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        collectionName:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            entity\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        entity:     FirebaseEntity\n\n                    \n                \n                    \n                        \n                            Type :     FirebaseEntity\n\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleCollectionResponse\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handleCollectionResponse:     \n\n                    \n                \n                    \n                        \n                            Default value : (data: any): Array => {\n    let result: Array = [];\n    if (Array.isArray(data)) {\n      const collection: Array = [];\n\n      data.forEach((item: any) => {\n        const target = _.cloneDeep(this.entity) as T;\n        target.deserialize(item);\n        collection.push(target);\n      });\n\n      result = collection;\n    }\n\n    return result;\n  }\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            handleEntityResponse\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        handleEntityResponse:     \n\n                    \n                \n                    \n                        \n                            Default value : (data: any): T => {\n    let result: T;\n\n    const target = _.cloneDeep(this.entity) as T;\n    target.deserialize(data);\n    result = target;\n\n    return result;\n  }\n                        \n                    \n                        \n                            \n                                    Defined in libs/core/src/lib/services/firestore-repository.service.ts:59\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport * as _ from 'lodash';\nimport { Observable,  of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FirebaseEntity } from '../models/firebase-entity.model';\nimport { Repository } from '../models/repository.model';\n\n@Injectable()\nexport class FirestoreRepository\n  implements Repository {\n  collectionName: string;\n  constructor(\n    public entity: FirebaseEntity,\n    private afs: AngularFirestore\n  ) {\n    this.collectionName = entity.entityName;\n  }\n\n  getById(id: string): Observable {\n\n    return this.afs.doc(`${this.entity.entityName}/${id}`)\n      .valueChanges()\n      .pipe(map(this.handleEntityResponse));\n  }\n\n  getAll(): Observable> {\n\n    return this.afs.collection(this.collectionName)\n      .valueChanges();\n  }\n\n  find(): Observable> {\n    throw new Error('Method not implemented.');\n  }\n\n  create(entity: FirebaseEntity): Observable {\n    if (!entity) return of();\n\n    const entityToSave = { ...entity.serialize() };\n    entityToSave.id = this.afs.createId();\n    this.afs.collection(this.collectionName)\n      .doc(entityToSave.id)\n      .set(entityToSave);\n  }\n  remove(entity: FirebaseEntity): Promise {\n    if (!entity) return Promise.resolve(undefined);\n\n    return this.afs.collection(this.collectionName)\n      .doc(entity.id)\n      .delete();\n  }\n\n  update(entity: FirebaseEntity): Promise {\n    return this.afs.collection(this.entity.entityName)\n      .doc(entity.id).set(entity, { merge: true });\n  }\n\n  private handleEntityResponse = (data: any): T => {\n    let result: T;\n\n    const target = _.cloneDeep(this.entity) as T;\n    target.deserialize(data);\n    result = target;\n\n    return result;\n  }\n\n  private handleCollectionResponse = (data: any): Array => {\n    let result: Array = [];\n    if (Array.isArray(data)) {\n      const collection: Array = [];\n\n      data.forEach((item: any) => {\n        const target = _.cloneDeep(this.entity) as T;\n        target.deserialize(item);\n        collection.push(target);\n      });\n\n      result = collection;\n    }\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxDataContextModule.html":{"url":"modules/NgxDataContextModule.html","title":"module - NgxDataContextModule","body":"\n                   \n\n\n\n\n  Modules\n  NgxDataContextModule\n\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/core/src/lib/core.module.ts\n        \n\n\n        \n\n        \n            \n            \n        \n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { AngularFireDatabaseModule } from '@angular/fire/database';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { FirebaseRepository } from './services/firebase-repository.service';\nimport { FirestoreRepository } from './services/firestore-repository.service';\nimport { DataContext } from './services/datacontext.service';\nimport { DataServiceFactory } from './services/repository-factory.service';\n\n// Entities\nexport { BaseEntity } from './models/entity.model';\nexport { DataSource, DataSourceType } from './models/datasource.model';\nexport { FirebaseEntity } from './models/firebase-entity.model';\n\n// Decorators\nexport { Entity } from './decorators/entity.decorator';\nexport { Attribute } from './decorators/attribute.decorator';\n\n// Services\nexport { FirebaseRepository } from './services/firebase-repository.service';\nexport { FirestoreRepository } from './services/firestore-repository.service';\nexport { DataContext } from './services/datacontext.service';\nexport { DataServiceFactory } from './services/repository-factory.service';\n\nconst SERVICES = [\n  FirebaseRepository,\n  FirestoreRepository,\n  DataContext,\n  DataServiceFactory\n];\n \n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AngularFireDatabaseModule,\n    AngularFirestoreModule,\n    HttpClientModule],\n  exports: []\n})\nexport class NgxDataContextModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxDataContextModule,\n      providers: [...SERVICES]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Repository.html":{"url":"interfaces/Repository.html","title":"interface - Repository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Repository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/models/repository.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    create\n                                \n                                \n                                    find\n                                \n                                \n                                    getAll\n                                \n                                \n                                    getById\n                                \n                                \n                                    remove\n                                \n                                \n                                    update\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreate(entity: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/repository.model.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            find\n                            \n                            \n                        \n                    \n                \n                \n                    \nfind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/repository.model.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAll\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/repository.model.ts:8\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getById\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetById(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/repository.model.ts:6\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \nremove(entity: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/repository.model.ts:14\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(entity: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/models/repository.model.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Observable } from 'rxjs';\n\nimport { BaseEntity } from './entity.model';\n\nexport interface Repository {\n  getById(id: string): Observable;\n\n  getAll(): Observable>;\n\n  find(): Observable>;\n\n  create(entity: T): Observable;\n\n  remove(entity: T): Promise;\n\n  update(entity: T): Promise;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestApiRepositoryService.html":{"url":"injectables/RestApiRepositoryService.html","title":"injectable - RestApiRepositoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RestApiRepositoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/core/src/lib/services/rest-api-repository.service.ts\n        \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                getAll\n                            \n                            \n                                getById\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \ncreate(entity: BaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/rest-api-repository.service.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    BaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            find\n                            \n                            \n                        \n                    \n                \n                \n                    \nfind()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/rest-api-repository.service.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getAll\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetAll()\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/rest-api-repository.service.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Observable>\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            getById\n                            \n                            \n                        \n                    \n                \n                \n                    \ngetById(id: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/rest-api-repository.service.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            remove\n                            \n                            \n                        \n                    \n                \n                \n                    \nremove(entity: BaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/rest-api-repository.service.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    BaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update\n                            \n                            \n                        \n                    \n                \n                \n                    \nupdate(entity: BaseEntity)\n                    \n                \n\n\n                        \n                            \n                                    Defined in libs/core/src/lib/services/rest-api-repository.service.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                        \n                                                                    BaseEntity\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { BaseEntity } from '../models/entity.model';\nimport { Repository } from '../models/repository.model';\n\n@Injectable()\nexport class RestApiRepositoryService\n  implements Repository {\n  getById(id: string): Observable {\n    throw new Error('Method not implemented.');\n  }\n  getAll(): Observable> {\n    throw new Error('Method not implemented.');\n  }\n  find(): Observable> {\n    throw new Error('Method not implemented.');\n  }\n  create(entity: BaseEntity): Observable {\n    throw new Error('Method not implemented.');\n  }\n  remove(entity: BaseEntity): Promise {\n    throw new Error('Method not implemented.');\n  }\n  update(entity: BaseEntity): Promise {\n    throw new Error('Method not implemented.');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n0.0.7 (2018-12-18)\nBug Fixes\n\nforces npm version regardless of git changes (bbdef336)\nforces npm version regardless of git changes (9e6459cf)\nchanges script execution order (a5a8d3d8)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                libs/core/src/lib/core.module.ts\n            \n            \n                variable\n            \n            \n                SERVICES\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/core/src/lib/decorators/attribute.decorator.ts\n            \n            \n                interface\n            \n            \n                AttributeDecoratorOptions\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/core/src/lib/decorators/attribute.decorator.ts\n            \n            \n                interface\n            \n            \n                EntityAttribute\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                libs/core/src/lib/decorators/attribute.decorator.ts\n            \n            \n                function\n            \n            \n                Attribute\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/core/src/lib/decorators/attribute.decorator.ts\n            \n            \n                variable\n            \n            \n                ATTRIBUTE_METADATA\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/core/src/lib/decorators/entity-property.decorator.ts\n            \n            \n                function\n            \n            \n                EntityProperty\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/core/src/lib/decorators/entity.decorator.ts\n            \n            \n                function\n            \n            \n                Entity\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                libs/core/src/lib/models/datasource.model.ts\n            \n            \n                interface\n            \n            \n                ApiConfig\n            \n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                libs/core/src/lib/models/datasource.model.ts\n            \n            \n                interface\n            \n            \n                CustomServiceConfig\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                libs/core/src/lib/models/datasource.model.ts\n            \n            \n                interface\n            \n            \n                DataSource\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                libs/core/src/lib/models/datasource.model.ts\n            \n            \n                interface\n            \n            \n                EntityServiceConfig\n            \n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                libs/core/src/lib/models/entity.model.ts\n            \n            \n                class\n            \n            \n                BaseEntity\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                libs/core/src/lib/models/firebase-entity.model.ts\n            \n            \n                class\n            \n            \n                FirebaseEntity\n            \n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                libs/core/src/lib/models/repository.model.ts\n            \n            \n                interface\n            \n            \n                Repository\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                libs/core/src/lib/services/datacontext.service.ts\n            \n            \n                injectable\n            \n            \n                DataContext\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                libs/core/src/lib/services/firebase-repository.service.ts\n            \n            \n                injectable\n            \n            \n                FirebaseRepository\n            \n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                libs/core/src/lib/services/firestore-repository.service.ts\n            \n            \n                injectable\n            \n            \n                FirestoreRepository\n            \n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                libs/core/src/lib/services/repository-factory.service.ts\n            \n            \n                injectable\n            \n            \n                DataServiceFactory\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                libs/core/src/lib/services/rest-api-repository.service.ts\n            \n            \n                injectable\n            \n            \n                RestApiRepositoryService\n            \n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^7.0.0\n        \n            @angular/common : ^7.0.0\n        \n            @angular/compiler : ^7.0.0\n        \n            @angular/core : ^7.0.0\n        \n            @angular/fire : ^5.1.0\n        \n            @angular/forms : ^7.0.0\n        \n            @angular/platform-browser : ^7.0.0\n        \n            @angular/platform-browser-dynamic : ^7.0.0\n        \n            @angular/router : ^7.0.0\n        \n            @compodoc/compodoc : ^1.1.6\n        \n            @ng-bootstrap/ng-bootstrap : ^4.0.0\n        \n            @ngrx/effects : 6.1.0\n        \n            @ngrx/router-store : 6.1.0\n        \n            @ngrx/store : 6.1.0\n        \n            @nrwl/nx : 7.1.1\n        \n            bootstrap : ^4.1.3\n        \n            core-js : ^2.5.4\n        \n            faker : ^4.1.0\n        \n            firebase : ^5.5.7\n        \n            font-awesome : ^4.7.0\n        \n            include-media : ^1.4.9\n        \n            lodash : ^4.17.11\n        \n            ngx-highlightjs : ^2.1.4\n        \n            rxjs : ~6.3.3\n        \n            zone.js : ^0.8.26\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DataSourceType   (libs/.../datasource.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/core/src/lib/models/datasource.model.ts\n    \n        \n            \n                \n                    \n                        \n                        DataSourceType\n                    \n                \n                        \n                            \n                                 firebase\n                            \n                        \n                        \n                            \n                                 firestore\n                            \n                        \n                        \n                            \n                                 rest\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Attribute   (libs/.../attribute.decorator.ts)\n                        \n                        \n                            Entity   (libs/.../entity.decorator.ts)\n                        \n                        \n                            EntityProperty   (libs/.../entity-property.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/core/src/lib/decorators/attribute.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Attribute\n                            \n                            \n                        \n                    \n                \n                \n                    \nAttribute(options)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    libs/core/src/lib/decorators/entity.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Entity\n                            \n                            \n                        \n                    \n                \n                \n                    \nEntity(name)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    libs/core/src/lib/decorators/entity-property.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EntityProperty\n                            \n                            \n                        \n                    \n                \n                \n                    \nEntityProperty(entity?)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entity\n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nngx-datacontext - Data context service for Angular applications to easily create data services and link them to entities.\n,\n\n\n\n\n\nDemo\nView all the directives in action at https://alfredoperez.github.io/ngx-datacontext\nDependencies\n\nAngular (requires Angular 2 or higher, tested with 2.0.0)\n\nInstallation\nInstall above dependencies via npm. \nNow install ngx-datacontext via:\nnpm install --save ngx-datacontext\nSystemJS\n\nNote:If you are using SystemJS, you should adjust your configuration to point to the UMD bundle.\nIn your systemjs config file, map needs to tell the System loader where to look for ngx-datacontext:\n`js\nmap: {\n  'ngx-datacontext': 'node_modules/ngx-datacontext/bundles/ngx-datacontext.umd.js',\n}\n\n---\n\nOnce installed you need to import the main module:\n```js\nimport { NgxDatacontextModule } from 'ngx-datacontext';The only remaining part is to list the imported module in your application module. The exact method will be slightly\ndifferent for the root (top-level) module for which you should end up with the code similar to (notice NgxDatacontextModule .forRoot()):\nimport { NgxDatacontextModule } from 'ngx-datacontext';\n\n@NgModule({\n  declarations: [ AppComponent, ... ],\n  imports: [NgxDatacontextModule.forRoot(), ...],  \n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}Other modules in your application can simply import NgxDatacontextModule:\nimport { NgxDatacontextModule } from 'ngx-datacontext';\n\n@NgModule({\n  declarations: [OtherComponent, ...],\n  imports: [NgxDatacontextModule, ...], \n})\nexport class OtherModule {\n}Usage\nLicense\nCopyright (c) 2017 Alfredo Perez. Licensed under the MIT License (MIT)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nThe MIT License (MIT)\nCopyright (c) 2019        Alfredo Perez\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxDataContextModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ATTRIBUTE_METADATA   (libs/.../attribute.decorator.ts)\n                        \n                        \n                            SERVICES   (libs/.../core.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/core/src/lib/decorators/attribute.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ATTRIBUTE_METADATA\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ATTRIBUTE_METADATA:     \n\n                    \n                \n                    \n                        \n                            Default value : Symbol('AttributeMetadata')\n                        \n                    \n\n\n            \n        \n\n    libs/core/src/lib/core.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SERVICES\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        SERVICES:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  FirebaseRepository,\n  FirestoreRepository,\n  DataContext,\n  DataServiceFactory\n]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
